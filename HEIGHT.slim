initialize() {
	defineConstant("chromosome_length", 1441779); //this must be 1Mbp (0.005% of chromosome 3) 
	defineConstant("mutation_rate",1.29e-08);
	defineConstant("recomb_rate",1.1279585624662551e-08);
	initializeSex("A");
	defineConstant("In_opt_pheno",173.0);
	defineConstant("Eu_opt_pheno",180.0);
	defineConstant("Asia_opt_pheno",170.0);
	initializeMutationRate(mutation_rate);
	//Read start and end of independent ld blocks 
	lines= readFile("slim_start_end.txt");
	starts = NULL; ends = NULL;
	for (line in lines){
		components = strsplit(line, "\t");
		starts = c(starts, asInteger(components[1]));
		ends = c(ends, asInteger(components[2]));
	}
	//Read position of independent variants and effect sizes
	independent_vars = readFile("independent_variantsA"); // this file has the 133 but the pertinent to 1mbp is only the first row 
	pos= NULL; beta = NULL;
	for (line in independent_vars){
		components = strsplit(line, "\t");
		pos= c(pos, asInteger(components[0]));
		beta =  c(beta, asFloat(components[1]));
	}
	defineGlobal("pos",pos);
	defineGlobal("beta",beta);
	
	// mutations representing alleles in QTLs
	initializeMutationType("m2", 0.5, "n",0.002567108,1.704007);
	// mean: 0.002567108   s.d: 1.704007
	m2.convertToSubstitution = F;
	m2.mutationStackPolicy = "l"; m2.color = "red";
	initializeGenomicElementType("g1", m2, 1.0);
	initializeGenomicElement(g1,starts,ends);
	
	recomb_positions =c(60157,60158,1441778,1441779);
	rates=c(rep(c(recomb_rate,0.5),2));
	initializeRecombinationRate(rates,recomb_positions);
}

//make QTLs neutral
fitness(m2) {
	return 1.0;
}

//fitness effect of the trait is drawn from a Gaussian function based on the difference between the phenotype and the optimum
fitness(NULL,p1) {
	return 1.0 + dnorm(In_opt_pheno - individual.tagF, In_opt_pheno, 1.0);}
fitness(NULL,p2) {
	return 1.0 + dnorm(Eu_opt_pheno - individual.tagF, Eu_opt_pheno, 1.0);}
fitness(NULL,p3) {
	return 1.0 + dnorm(Asia_opt_pheno - individual.tagF, Asia_opt_pheno, 1.0);}

// Initialize the ancestral African population size
1 { sim.addSubpop("p1", 7300); }

// Add standing variation 
1 late(){
	g = sim.subpopulations.genomes;
	sites=sample(0:chromosome_length,600);
	g.addNewMutation(m2,rnorm(600,0.002567108,1.704007),sites);
	mean_pheno=mean(sim.subpopulations.individuals.sumOfMutationsOfType(m2));
	qtls=sim.mutationsOfType(m2);
	if (mean_pheno < 0){
		for(i in 0:(length(qtls)-1)){
			qtls[i].setSelectionCoeff(qtls[i].selectionCoeff*-1);
			mean_pheno=mean(sim.subpopulations.individuals.sumOfMutationsOfType(m2));
		}
	}cat("initial mean phenotype: \n " +mean_pheno);
}

// construct phenotypes from the additive effects of QTLs 
//sum of the effect sizes of all m2 mutations in the individualâ€™s genomes		
//QTL alleles have the same additive effect
1:8180  late() { // For African branch 
	inds = p1.individuals;
	inds.tagF = inds.sumOfMutationsOfType(m2);}
7620:8180 late(){ //For european branch 
	inds = p2.individuals;
	inds.tagF = inds.sumOfMutationsOfType(m2);}
8095:8180 late(){ //for asian branch 
	inds = p3.individuals;
	inds.tagF = inds.sumOfMutationsOfType(m2);}

// introduce effect sizes in roughly the right positions along the chromosome
36500 late(){
	qtls = sim.mutationsOfType(m2);
	for (i in 0:(length(qtls.position)-1)){
		for (j in 0:(length(pos)-1)){
			if((pos[j]-50)<qtls.position[i] & qtls.position[i]<(pos[j]+50)){
				cat("qtl in pos " + qtls.position[i] + "and beta" + qtls[i].selectionCoeff);
				cat("beta in j "+ beta[j]);
				qtls[i].setSelectionCoeff(beta[j]);
			}
		}
	}
}

// END BURN-IN period of 10*N=73000 generations 
// Expand the African population; this occurs 8800 gens * 25 years = 220000 
// Thus, simulation should end at generation 1+73000+8800=81801
73000 { p1.setSubpopulationSize(12300); }

// SPLIT Eurasians (p2) from Africans (p1) and SET UP MIGRATION between them
// This occurs 5600 generations ago
// Relative to beginning, this is generation 81801-5600=76201
76201 {
	sim.addSubpopSplit("p2", 2100, p1);
	p1.setMigrationRates(c(p2), c(25e-5));
	p2.setMigrationRates(c(p1), c(25e-5));
	p1.outputVCFSample(10,F,outputMultiallelics=T);
}

// SPLIT p2 into European (p2) and East Asian (p3) subpopulations
// RESIZE & SET UP MIGRATION between them
// This occurs 848 generations ago; relative to beginning, this is generation 81801-848=80953
80953 {
	sim.addSubpopSplit("p3", 510, p2);
	p2.setSubpopulationSize(1000);
	// Set migration rates for the rest of the simulation
	p1.setMigrationRates(c(p2, p3), c(3e-5, 1.9e-5));
	p2.setMigrationRates(c(p1, p3), c(3e-5, 9.6e-5));
	p3.setMigrationRates(c(p1, p2), c(1.9e-5, 9.6e-5));
}

// SET UP EXPONENTIAL GROWTH in Europe (p2) and East Asia (p3)
// Where N(0) is the base subpopulation size and t = gen - 80953:
//    N(Europe) should be int(round(N(0) * (1 + 0.004)^t)), i.e., growth is r=0.4% per generation
//    N(East Asia) should be int(round(N(0) * (1 + 0.0055)^t)), i.e., growth is r=0.55% per generation
80953:81801 {
	t = sim.generation - 80953;
	p2_size = round(1000 * (1 + 0.004)^t);
	p3_size = round(510 * (1 + 0.0055)^t);
	p2.setSubpopulationSize(asInteger(p2_size));
	p3.setSubpopulationSize(asInteger(p3_size));
}
73000:81802 late() {
	if (sim.generation % 36 == 0) { // change to %36 (every 36th gen)
		cat("QTLs at generation P1" + sim.generation + ":\n\n");
		cat("Mean phenotype african branch :\n");
		meanPhenotypeP1 = mean(p1.individuals.tagF);
		cat(format("%.2f", meanPhenotypeP1));
		cat("\n\n-------------------------------\n");
		if(sim.generation > 76201){
			cat("QTLs at generation P2 \t" + sim.generation + ":\n\n");
			cat("Mean phenotype eur(asian) branch :\n");
			meanPhenotypeP2 = mean(p2.individuals.tagF);
			cat(format("%.2f", meanPhenotypeP2));
			cat("\n\n-------------------------------\n");
			qtls = sim.mutationsOfType(m2);
			for (i in 0:(length(qtls.position)-1)){
				for (j in 0:(length(pos)-1)){
					if((pos[j]-50)<qtls.position[i] & qtls.position[i]<(pos[j]+50)){
						cat("qtl in pos : " + qtls.position[i] + "and beta : " + qtls[i].selectionCoeff);
						cat("beta in j : "+ beta[j]);
					}
				}
			}
		}
		if(sim.generation > 80953){
			cat("QTLs at generation P3 \t" + sim.generation + ":\n\n");
			cat("Mean phenotype Asian branch :\n");
			meanPhenotypeP3 = mean(p3.individuals.tagF);
			cat(format("%.2f", meanPhenotypeP3));
			cat("\n\n-------------------------------\n");
		}
	}
}
// OUTPUT AND TERMINATE
// Generation 81801 is the present
81801 late() {
	p2.outputVCFSample(100,F,outputMultiallelics=T,filePath="./output_slim_vcf_p2");}

81802 { sim.simulationFinished(); }



